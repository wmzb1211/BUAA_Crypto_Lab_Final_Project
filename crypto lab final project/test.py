from SM4 import SM4
from SM3 import SM3
from SM2 import SM2
import Math_crypto
from RSA import RSA
paramtersFor_SM2_sign = [60275702009245096385686171515219896416297121499402250955537857683885541941187
,54492052985589574080443685629857027481671841726313362585597978545915325572248
,45183185393608134601425506985501881231876135519103376096391853873370470098074
,[29905514254078361236418469080477708234343499662916671209092838329800180225085, 2940593737975541915790390447892157254280677083040126061230851964063234001314]
,60275702009245096385686171515219896415919644698453424055561665251330296281527
,'ALICE123@YAHOO.COM'
,[4927346340877997421592888003129352901369751434954921663604743238822873158794, 56090775331359075302546016414740579914612192649583459645010750108260086900823]
,'message digest'
,'Sign'
,8387551947784012071400071471596312053542870740821494713120726177333060924003
,49165263701565432377505549247848435858362931747789390865593867043744446085487]
SM2_sign_p = paramtersFor_SM2_sign[0]
SM2_sign_a = paramtersFor_SM2_sign[1]
SM2_sign_b = paramtersFor_SM2_sign[2]
SM2_sign_G = paramtersFor_SM2_sign[3]
SM2_sign_n = paramtersFor_SM2_sign[4]
SM2_sign_ID_A = paramtersFor_SM2_sign[5]
SM2_sign_P_A = paramtersFor_SM2_sign[6]
SM2_sign_M = paramtersFor_SM2_sign[7]
SM2_sign_Mode = paramtersFor_SM2_sign[8]
SM2_sign_d_A = paramtersFor_SM2_sign[9]
SM2_sign_k = paramtersFor_SM2_sign[10]
result_SM2_sign = (29375463689586694004441797766812698475573938256363780089425801847059442521553
, 50558071754134037809738440507460307292654583241166284157895327241897986943975)

paramtersFor_SM2_verify = [60275702009245096385686171515219896416297121499402250955537857683885541941187
,54492052985589574080443685629857027481671841726313362585597978545915325572248
,45183185393608134601425506985501881231876135519103376096391853873370470098074
,(29905514254078361236418469080477708234343499662916671209092838329800180225085, 2940593737975541915790390447892157254280677083040126061230851964063234001314)
,60275702009245096385686171515219896415919644698453424055561665251330296281527
,'neverGonnaGive@You.up'
,(21981408064932226135301202771561762143335985281913055880427170456330466891349, 28028589283980403447494504310906074608090471180368249734410319713138692249995)
,'never gonna let you down'
,'Vrfy'
,48063449755609876878532292799059389653047118380814680452731271756018810958400
,12071032352070378296001266231648972411992535359641329464973392771258376729799]
SM2_verify_p = paramtersFor_SM2_verify[0]
SM2_verify_a = paramtersFor_SM2_verify[1]
SM2_verify_b = paramtersFor_SM2_verify[2]
SM2_verify_G = paramtersFor_SM2_verify[3]
SM2_verify_n = paramtersFor_SM2_verify[4]
SM2_verify_ID_A = paramtersFor_SM2_verify[5]
SM2_verify_P_A = paramtersFor_SM2_verify[6]
SM2_verify_M = paramtersFor_SM2_verify[7]
SM2_verify_Mode = paramtersFor_SM2_verify[8]
SM2_verify_r = paramtersFor_SM2_verify[9]
SM2_verify_s = paramtersFor_SM2_verify[10]
result_SM2_verify = True

def test_SM2_sign():
    sm2 = SM2(SM2_sign_a, SM2_sign_b, SM2_sign_p, SM2_sign_G, SM2_sign_n)
    result = sm2.sign(SM2_sign_ID_A, SM2_sign_P_A, SM2_sign_M, SM2_sign_d_A, SM2_sign_k)
    if result == result_SM2_sign:
        print("SM2 sign test passed")
    else:
        print("SM2 sign test failed")

def test_SM2_verify():
    sm2 = SM2(SM2_verify_a, SM2_verify_b, SM2_verify_p, SM2_verify_G, SM2_verify_n)
    result = sm2.verify(SM2_verify_ID_A, SM2_verify_P_A, SM2_verify_M, SM2_verify_r, SM2_verify_s)
    if result == result_SM2_verify:
        print("SM2 verify test passed")
    else:
        print("SM2 verify test failed")

def test_SM2():
    test_SM2_sign()
    test_SM2_verify()

SM3_MSG = 'this is the first SM3 testcase.'
result_SM3 = '1c7d1fcf91f37a2ecb8877b5896d3474010784a75cdb1d392375029c4469e653'
def test_SM3():
    sm3 = SM3()
    result = sm3.hash_sm3(SM3_MSG)
    if result == result_SM3:
        print("SM3 test passed")
    else:
        print("SM3 test failed")
SM4_plain = 0x1f47f42618704f95e61da82daf959bd8
SM4_encryption_key = '0x3b3678c215121f0e837e04f58584ed32'
result_SM4_encrypt = 0xf3bf692c7a33557035a115624ef5f976

def test_SM4_encrypt():
    sm4 = SM4(SM4_encryption_key)
    result = sm4.SM4_encrypt(SM4_plain)
    if result == result_SM4_encrypt:
        print("SM4 encrypt test passed")
    else:
        print("SM4 encrypt test failed")
SM4_cipher = 0xc04a9b311a2fc245f742c5719fcf249d
SM4_decryption_key = '0x4046fb1985d94a7f1ff55ec7ec5f6054'
result_SM4_decryption = 0x6b956ddb0faff373bc338cb600739f23

def test_SM4_decrypt():
    sm4 = SM4(SM4_decryption_key)
    result = sm4.SM4_decrypt(SM4_cipher)
    if result == result_SM4_decryption:
        print("SM4 decrypt test passed")
    else:
        print("SM4 decrypt test failed")
file_path_SM4CTR = 'test data/SM4 CTR data.txt'
SM4_encryption_CTR_key = '0x557cfb9c1c78b048ae02bf5c88bc781a'
IV_SM4_CTR = 0xb5e6886305720c08aed644c3dfc36cd4

def test_SM4_CTR():
    sm4 = SM4(SM4_encryption_CTR_key)
    result = sm4.SM4_CTR(file_path_SM4CTR, IV_SM4_CTR, 1)
    result = sm4.SM4_CTR(file_path_SM4CTR + '.SM4_CTR', IV_SM4_CTR, 0)

file_path_SM4CFB = 'test data/SM4 CFB data.txt'
SM4_encryption_CFB_key = '0x04ab5f1f059edc1d283fb746004847d2'
IV_SM4_CFB = '0xcfd5e738c3887d647181484813ebf90e'
def test_SM4_CFB():
    sm4 = SM4(SM4_encryption_CFB_key)
    result = sm4.SM4_CFB(file_path_SM4CFB, IV_SM4_CFB, 7, 1)
    result = sm4.SM4_CFB(file_path_SM4CFB + '.SM4_CFB', IV_SM4_CFB, 7, 0)


def test_SM4():
    test_SM4_encrypt()
    test_SM4_decrypt()
    test_SM4_CTR()
    test_SM4_CFB()

e = 2920409522402926597627191488120636244538724270022998166981037583694182889745072153997951709132903469153746154058782302049361904975953920415583179235627460458533897822450783730009468017406778947855134635
p = 9084765279459973722703105122578434463570460548446011782795531096631608711386758039869846624407809636935725454210198201714484752683287324692998717028735972189703006864635333180338384765812830167319173319
q = 658095039219456120108212222379832238548414272254622727412601986833530725509567656248224707048870541531999954162212518311318563356943680180726228479575112943778457627584304132525988962784939253169192487
N = p * q
phi = (p - 1) * (q - 1)
msgRSA = 8267188997198709383102216295528861867050429668709122381362481797742114635297750
result_RSA_encrypt = 5616976246200305158039112558279347117127190323140566029817119222816875304862873433160440188246954626180457052713652373546503116990250870468693721436449417595407928058472984986636283252068375379203054671193294002273552318509530075387982542503310814623494784422486899345631204592432795069494302263847732614570838788115433044853549920244063677931167782491853844961979279728902617687381203583457549865267530

def test_RSA_encrypt():
    rsa = RSA(e, N)
    result = rsa.encrypt(msgRSA)
    if result == result_RSA_encrypt:
        print("RSA encrypt test passed")
    else:
        print("RSA encrypt test failed")


def test_RSA_OAEP():
    k = 128
    NN = 0xc32a1dbd27a8b57617cde48c424ff5936d6415a679a019605deb0f1a4a3b29c73770d77fcb4f3ed36c4f2c94fb17e8c32feb0674b11d340c7734ffc4ca19401b00edca55b34234d6e6459022fe7b318e222b35435aaffcc430990acda67199035118ae140f80fc5b0dafaa3df9f9300a0316340403908278cfe3b9aca2aa6bf1
    ee = 0x10001
    m = '0xb96af050d20a2f68f1b1b68a90139ff3ef62c2c5527d41122bc6c2bfa59c300dea4791e2e9d9b74518042bc860'
    L = '0x'
    seed = '0xf72f68a0abb2c333c489800626349e8ea7ecd4da'
    rsa = RSA(ee, NN)
    result = rsa.OAEP_encryption(k, m, L, seed)
    mm = '0x820d8cf1e57e85e3f4084da44ff0f08fdfdb6b0dbb3055ec56d8e113c5c816b54feae15cd18d71a3993a10d61db05bddcd2744d6e1385a3ef739bc77590e0382246925643051b802761505cb6b3f0b4fe52feecba70b57b9f74d9b4c52e11fa89f7dcb2236689d56ddbe87724ae83c89c411af8eb653c4d9519faf7d72dce495'
    if result == mm:
        print("RSA OAEP encryption test passed")
    else:
        print("RSA OAEP encryption test failed")
    k = 512
    NN = 0xd561ae21b504e8b34f96611a2afea71a927cd2f80a763b6f116d619b1c414f74cf26b50255ef111fdb1a169b3f1388766a36bd9dd42312fe90b1698247e0336b2d73992b1d6f236ceb049e2ebabdbdb66f5bf956fba33dda1ddfeec40f878dd318a254533cb123e62cd22401915e811a0420714b3cb4886734ce5869f754e85a82842e7ce3f8b1ab37ea36b625d4f2370b6cfe93af965562c01e33968dac310b305bd9aadca3a99bd1c6e1b34905762cd434f5a8bc76891e65ecf8b8d22b5803f84795cfa400e8a7da52cafd53f0634fde71b206cbece56785e48da5056b8a6fee4a5df8549f4c85f5c378862e7c339852c25ec76122ab8617f2ce87003be2815d88d5464ab4fda04a63265aa579b3ad434a779ee356470aefcd638469e9e7e07d47f518e32f609976ba2b55230a4c80bb3ff7de65a6fd5b1b6bb454b98e04d7baba9e23c8be59376c96f27c2fddc079a720ecb71508c25ec7af6c89ed1cfbcbf28caaf7d0ea2344d1545967ef0dcd9f83794c57b333eb9fa5f3a1ebf757985289fe9f7286f640d59b8b687cbf1fb8ef194f9279f6684b69d44014ce4dc581d2c4571c94026748d71c6025290885528b1c9842b58a74001022ed8d88082403d2c0379d289c44fe1223041fc7e74ff13e392e8e63a86d0d67397f45d62b3e58d6bbaff9cabe5e748a37fdb6bad47e2245f9d9484c044be0fdce09cf94d89da60f
    dd = 0x57c9e74d60df5329aa9dd0f76626fcf316bf9a4088755a4078e80a973949b979f25c176e8d925cf6413b7b7f85b4f098df5c04293204f82499bd140e90a9b21def4637072105ff8a292aee358588d8cb7d07570f2d5a5cf127076181726e2fb060db305c4a850aa3015fb786999b4afc3c2468d82e728c080216bf1361b9a21ad2c5b52696d853a880c9b096c1fbd9674221269ff646a07c8f541d9f5c4c32a54ad10f3d97a711f9d495c177f49bf5a1bdf0c7fd1304a5a74701f6d67b496fddba4121669b2ff088566f67aa4fe57fc6755b4b8636521193c4e7624b396ea43726cf9bd7b6610fa7b194293af3571017243d69a717d49ec2fd895ce4f7f8ab58132cb592101faa79105573603b2785565f44df34a03780d33124f635fd1a6bd3b8cefbcfbbed603b29aa0c777e933c9bccec44dea9b86ccd143234db686dcf4216f3b7b6014e06b9e366423e832c40b6b1f7aac6ec83d8d45ae71ad97b9fc084c386594b50666c6cba1207e6149e848af16296ba674949679e811b0ba899380435aa7226147be8236e1866dd6bd7fefb1c41537111ae1b54c9e30444ae4497b36f13789482bccd3d3ef72f395a20a216ac95b191bcb8a4aec0ac48506155863ae7812287330c90618c09810fc961ef750759b55188859caf43b6bd11d30b38911b2c9b4d9e288d97ffd69de28c560da8d5a09942488c0a2c068200ba0131afe1
    c = '0x5cb545b00acadd8a12088ee58da7a25279e6b1b4347c986cee5f0710fe361864376c6e82648121e2e57b40b38f969f47c905211d6cb28fb88aaafcecbf6655b891f70e10d7efa6dca3b58b249ab2aff3d7cf8f2509bcea00f5ba43f9c6124a07fc5e938654d0d70d709b73ab1013a34d969c950e2ebce1279364a0df88a89e74b27fc9f8cfee6423b5b61a3a08aba385991835ff749a7b4098cbb7ca0e0f6a5255f7e3174d9dcfccc6fc8c7e834bbd14f2c58ac33094b277413b84620a5296ca9a2c8486d152ea3fb1025f2d8ec88a467d277650b04166e761649eb833b9083c09c8940a2f6c1981bc0839bbbbc608cb41e72d56671648d9bac0eca47240cd4ccadbd9c100f01913af27457a40dc25dad53c90c297ebb1e7dfcdf7c53cd24cc4f68f034b77f583c8e58892d44113a4a73d565df68fc69e15fbfaec4643d22f14f376ea8f4edc3902aa68f7b39d42c0ba34b6eaaa0872ea1a739a40e26bdf34b58430e159440c672a1a9da48f0f1eb5c328eea541e6bcda9d85eac47f2185616fabc0025f25529b27ac36a880a7cae088942f489627fd2f51c13f5d9713d3d00ae5915da6ac3d611a0bd891103249ebb2e8b5603d7e3ade797fc92378115fadad98b9520370db7b96c0538b191afc82a2928e163b8b0852534f3e5905b547655707695b5b986db502e1737e1c813b76409855bf966f6429d171e31cfa11d733e4'
    L = '0x'
    rsa = RSA(dd, NN)
    mm = '0x88241d011b11d452f2a07054ac6ff68f559136fe9fa46e70d176e132e74ec124c871a71c2140da5bfc7b43f66fa1df3c7f43c9045f566980ebc52846db39519dbddfd03a8b159618fcc09f242e15c9bb13182eddde444e5f86224a4689110b23b335a158cb5d01d75adeda690eee32cc947a1d952b5763c9d39d7e24faa96811b55dd2717c408aefc13dcd8af8cccf51c88f803d6b5b397cae7dbd5088b4bd3858ad5e5566c33141c658f00c2190833f9f61850272f4a3b62f615b7adebedacb3aa2b01a324f01a3901c44e0c117c5d999b0195ab3b34e4308f55e53b4e8d6eaf502c2d8f549761bc3a3f84fdf39efbc45fca01ec598d71741a86ea37ecdc0105ee6718d1dd7b534517e51d9ee034b36a18fbd6a05b969f611b7d896fa979f5078faaf10db30f994a0b2e08b0d8a811a805fe03366892573cf20b1edace59b5722046174b4f2a5cd9dce5d156be92742fd90d4e9695847bbcacce59f1bde9f498a134a59a32a64f59baef45580ca817f513e48a9718'

    result = rsa.OAEP_decryption(k, c, L)
    if result == mm:
        print('RSA OAEP decryption test passed')
    else:
        print('RSA OAEP decryption test failed')


def test_RSA():
    test_RSA_encrypt()
    test_RSA_OAEP()






